-- .sulua for  CGI invocation

-- First guard against execution from malicious local user (e.g. compromised
-- Apache), by ensuring that the script we will run is under the trusted
-- root directory.  We also validate PWD since it will be affect
-- package.path resolution.  PWD is set by sulua to the absolute path of the
-- current working directory. Paths provided by Apache may contain symbolic
-- links, so we use only the last path element of the script name (requiring
-- PWD to be the directory containing the script, as we expect with CGI).

local getenv = os.getenv

local home = getenv("HOME")

local pwd = getenv("PWD")
if (pwd.."/"):find(home.."/", 1, true) ~= 1 then
   error ("Current directory not under " .. home)
end

-- Subsequent code must guard against traditional client-based attacks.

-- make unstrusted variables available to CGI scripts
function os.getenv(s)
   return getenv(s) or getenv("SULUA_"..s)
end

-- cleanPath: Collapse "dir/.." and "." sequences.
--
-- cleanPath is associative:
--   cleanPath(a, cleanPath(b,c)) == cleanPath( cleanPath(a,b), c)
--
-- Is is guaranteed that the result:
--  a) Starts with "/" if and only if the input did.
--  b) Ends with "/" if and only if the input did.
--  c) Contains no consecutive "/" characters.
--  d) Contains no ".." path elements, except possibly at start of string.
--  e) Contains no "." path elements, except in the case of "." or "./"
--     (relative paths to the current directory or file).
-- 
local function cleanPath(path)
   local t = {}
   for elem in path:gmatch("[^/]+") do
      if elem == ".." then
         if #t > 0 and t[#t] ~= ".." then
            t[#t] = nil
         else
            t[#t+1] = elem
         end
      elseif elem ~= "." then
         t[#t+1] = elem
      end
   end
   local r = table.concat(t, "/")

   if path:sub(1,1) == "/" then
      r = "/" .. r
   end
   if r == "" then
      r = "."
   end
   if path:sub(-1) == "/" and r:sub(-1) ~= "/" then
      r = r .. "/"
   end
   return r
end

-- Run a ".lua" based on arg[0] as long as it's under HOME
local script = arg[0]..".lua"
if not script:sub(1,1) == "/" then
   script = pwd.."/"..script
end
script = cleanPath(script)

local handler, err = loadfile(script)
if not handler then
   error("Error loading " .. script .. "\n" .. err, 0)
end

arg[0] = script
handler()
