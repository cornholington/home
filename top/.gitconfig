# keep repository-specific stuff out of here (e.g. email addresses)
[user]
        name  = Rob Walker

[color]
        ui = auto

[alias]
        lol = log --oneline --decorate --graph
        lolm = log --oneline --decorate --graph --no-merges
        lola = log --oneline --decorate --graph --all
        lolam = log --oneline --decorate --graph --all --no-merges
        ls = ls-tree master --name-only
        lsr = ls-tree -r master --name-only
        ours = ! git diff :1:$1 :2:$1 && exit $? && :
        theirs = ! git diff :1:$1 :3:$1 && exit $? && :
        gerrit-refs = ! git ls-remote $(git remote) refs/changes/*/${1}/* refs/changes/*/${1} && exit $? && :
        gerrit-ref = ! bash -c \"[[ ${1} =~ / ]]\" || echo \"taking latest patchset for ${1}\" >&2 && git gerrit-refs ${1} | awk 'BEGIN{ref=\"no-such-ref\"}{}/[0-9a-fA-F]+/ {{n=split($2,elems,\"/\")}if(patchset<elems[n]){{patchset=elems[n]}{ref=$2}}}END{print ref}' && exit $? && :
        gerrit-pull = ! git pull $(git remote) $(git gerrit-ref ${1}) && exit $? && :
        gerrit-fetch = ! git fetch $(git remote) $(git gerrit-ref ${1}) && exit $? && :
        gerrit-cherry-pick = ! git gerrit-fetch ${1} && git cherry-pick FETCH_HEAD || git status | grep \"working directory clean\" && exit $? && :
        gerrit-checkout = ! git gerrit-fetch ${1} && git checkout FETCH_HEAD && exit $? && :
        gerrit-patch = ! git gerrit-fetch ${1} && git format-patch -1 --stdout FETCH_HEAD && exit $? && :
        gerrit-update = ! git push origin HEAD:refs/changes/$(git rev-parse --abbrev-ref HEAD)
        heads = ! eval $(git rev-list --all --children | awk '{ if (NF==1) print \"git --no-pager log -1 --decorate --oneline \" $1 \" && \" }END{print \"true\"}') && exit $? && :
        vheads = ! eval $(git rev-list --all --children | awk '{ if (NF==1) print \"git --no-pager log -1 --decorate \" $1 \" && \" }END{print \"true\"}') && exit $? && :
        recur = ! git "${@}" && git submodule foreach --recursive git "${@}" && exit $? && :
        smoosh = ! git commit --amend -C "$(git log -1 --pretty=format:%H)"
        # outputs all branches with an upstream attribute
        hub-branches = ! "for name in $(git config --name-only --get-regexp ^branch.*.upstream$) ;\
                          do\
                            name=${name%.upstream};\
                            echo ${name#branch.};\
                          done" && \
                          exit $? && :
        # outputs a branch's upstream attribute
        hub-upstream = ! git config branch.${1}.upstream && exit $? && :
        # sync a single branch, assumes branch.$1.upstream and branch.$1.origin are set
        hub-sync-branch = ! branch=$(git rev-parse --abbrev-ref HEAD) && \
                            git checkout ${1} && \
                            git pull -f $(git hub-upstream ${1}) ${1}:${1} && \
                            git push -f $(git config branch.${1}.remote) ${1} && \
                            git checkout ${branch} && \
                            exit $? && :
        # resync all branches with an "upstream" config attribute
        hub-sync = ! "for branch in $(git hub-branches); \
                      do \
                         git hub-sync-branch $branch; \
                     done" && \
                     git fetch -fp origin && \
                     exit $? && :
        # push current branch and create a PR, takes all the args that hub pull-request takes
        hub-pr = ! branch=$(git rev-parse --abbrev-ref HEAD) && \
                   [ "$branch" != master ] || (echo 'no PRs from master' && false) && \
                   git push --set-upstream origin "$branch" && \
                   hub pull-request
        # clone a fork $1 is the repository $2 is the upstream org/user
        #  e.g. if you've forked this "home" repository and want to do PRs, you'd run
        #  git hub-clone github.com:you/home cornholington
        hub-clone = ! [ ${1}x != x ] && [ ${2}x != x ] || (echo usage: 'git hub-clone <origin> <upstream-user>' && false) &&\
                      basename="${1##*/}" && \
                      dir="${basename%.git}" && \
                      git clone "$1" && \
                      (cd "$dir" && \
                       git remote add upstream "${1%:*}:${2}/$basename" &&\
                       git config branch.master.upstream upstream) && \
                       exit $? && :


[core]
	excludesfile = /home/rwalker/.gitignore
        deltaBaseCacheLimit = 1G

[push]
	default = simple
[merge]
	renamelimit = 10000
[rebase]
	autosquash = true
